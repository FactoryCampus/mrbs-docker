#!/usr/bin/with-contenv bash

[[ $DB_HOST ]] && export MRBS_DB_HOST=$DB_HOST
[[ $DB_USER ]] && export MRBS_DB_USER=$DB_USER
[[ $DB_PASS ]] && export MRBS_DB_PASSWORD=$DB_PASS
[[ $DB_DATABASE ]] && export MRBS_DB_DATABASE=$DB_DATABASE

[[ -z $MRBS_DB_DATABASE ]] && MRBS_DB_DATABASE=$DB_DATABASE
[[ -z $MRBS_DB_USER ]] && MRBS_DB_USER=$DB_USER
[[ -z $MRBS_DB_HOST ]] && MRBS_DB_HOST=$DB_HOST
[[ -z $MRBS_DB_PASSWORD ]] && MRBS_DB_PASSWORD=$DB_PASS

chown -R abc:abc /var/www

# create directory structure
mkdir -p \
	/config/www \
	/config/www/assets

# check for .env and copy default if needed
[[ ! -f "/config/www/config.inc.php" ]] &&
	cp /var/www/html/config.inc.php-sample /config/www/config.inc.php

# check for zero-length .env and alert user if found
[[ ! -s "/config/www/config.inc.php" ]] &&
	echo "WARNING: zero-length config.inc.php file detected. Please delete /config/www/config.inc.php and restart the container"

# link assets
rm -rf /var/www/html/assets
ln -s /config/www/assets /var/www/html/assets

# Set required variables depending on the db system used and mysql as default
SQL_CMD="mysql -u$MRBS_DB_USER -h$MRBS_DB_HOST -p$MRBS_DB_PASSWORD -D$MRBS_DB_DATABASE"
SQL_ARGS="-sNe"
SQL_QUERY="SELECT count(*) AS TN FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$MRBS_DB_DATABASE'"
TABLES_FILE=tables.my.sql
DB_PORT=3306
if [[ "$MRBS_DB_SYSTEM" == "pgsql" ]]; then
	export PGPASSWORD=$MRBS_DB_PASSWORD
	SQL_CMD="psql -U $MRBS_DB_USER -h $MRBS_DB_HOST $MRBS_DB_DATABASE"
	SQL_ARGS="-tc"
	SQL_QUERY="SELECT count(*) AS TN FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '$MRBS_DB_DATABASE'"
	TABLES_FILE=tables.pg.sql
	DB_PORT=5432
fi

# check for the mysql endpoint for 30 seconds
END=$((SECONDS + 30))
while [[ ${SECONDS} -lt ${END} ]] && [[ "${MRBS_DB_HOST+x}" != "x" ]]; do
	/usr/bin/nc -z ${MRBS_DB_HOST} ${DB_PORT} &&
		if [[ -n "$(/usr/bin/nc -w1 ${MRBS_DB_HOST} ${DB_PORT})" ]]; then
			[[ -n "${RUN}" ]] && break
			RUN="RAN"
			# we sleep here again due to first run init on DB containers
			[[ ! -f /dbwait.lock ]] && sleep 5
		else
			sleep 1
		fi
	sleep 1
done

# update database - will set up database if fresh, or, migrate existing
echo "*** DB init/upgrade ***"

TABLE_COUNT=$($SQL_CMD $SQL_ARGS "$SQL_QUERY")
if [[ $TABLE_COUNT -eq "0" ]]; then
	echo "*** DB is empty -> initing!! ***"
	if ! $SQL_CMD </usr/share/mrbs/$TABLES_FILE; then
		echo "*** DB init FAILED!! ***"
		exit 1
	fi
fi
TABLE_COUNT=$($SQL_CMD $SQL_ARGS "$SQL_QUERY")
if [[ $TABLE_COUNT -eq "0" ]]; then
	echo "*** DB is empty -> initing!! ***"
	if ! $SQL_CMD </usr/share/mrbs/$TABLES_FILE; then
		echo "*** DB init FAILED!! ***"
		exit 1
	fi
fi

# set permissions
chown -R abc:abc \
	/config

# set lockfile to avoid DB waits for this specific container
touch /dbwait.lock
