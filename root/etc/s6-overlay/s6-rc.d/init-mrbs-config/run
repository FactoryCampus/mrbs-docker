#!/usr/bin/with-contenv bash

chown -R abc:abc /var/www

# create directory structure
mkdir -p \
	/config/www \
	/config/www/assets

# check for .env and copy default if needed
[[ ! -f "/config/www/config.inc.php" ]] &&
	cp /app/www/public/config.inc.php-sample /config/www/config.inc.php

# genderate secret salt
[[ ! -f "/config/keys/secretsalt" ]] &&
	LC_CTYPE=C tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=32 count=1 2>/dev/null > /config/keys/secretsalt

# check for zero-length .env and alert user if found
[[ ! -s "/config/www/config.inc.php" ]] &&
	echo "WARNING: zero-length config.inc.php file detected. Please delete /config/www/config.inc.php and restart the container"

# link assets
rm -rf /app/www/public/assets
ln -s /config/www/assets /app/www/public/assets

chown -R abc:abc /app/www/public
chmod -R +r /config/www

# Set required variables depending on the db system used and mysql as default
SQL_CMD="mysql -u$DB_USER -h$DB_HOST -p$DB_PASS -D$DB_DATABASE"
SQL_ARGS="-sNe"
SQL_QUERY="SELECT count(*) AS TN FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$DB_DATABASE'"
TABLES_FILE=tables.my.sql
DB_PORT=3306
if [[ "$DB_TYPE" == "pgsql" ]]; then
	SQL_CMD="psql -U $DB_USER -h $DB_HOST $DB_DATABASE"
	SQL_ARGS="-tc"
	SQL_QUERY="SELECT count(*) AS TN FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG = '$DB_DATABASE'"
	TABLES_FILE=tables.pg.sql
	DB_PORT=5432
fi

# check for the mysql endpoint
echo "Waiting for DB to be available"
END=$((SECONDS + 30))
while [[ ${SECONDS} -lt ${END} ]] && [[ -n "${DB_HOST+x}" ]]; do
    if [[ $(/usr/bin/nc -w1 "${DB_HOST}" "${DB_PORT}" | tr -d '\0') ]]; then
        if [[ -n "${RUN}" ]]; then
            break
        fi
        RUN="RAN"
        # we sleep here again due to first run init on DB containers
        if [[ ! -f /dbwait.lock ]]; then
            sleep 5
        fi
    else
        sleep 1
    fi
done

# update database - will set up database if fresh
echo "*** DB init ***"

TABLE_COUNT=$($SQL_CMD $SQL_ARGS "$SQL_QUERY")
if [[ $TABLE_COUNT -eq "0" ]]; then
	echo "*** DB is empty -> initing!! ***"
	if ! $SQL_CMD </usr/share/mrbs/$TABLES_FILE; then
		echo "*** DB init FAILED!! ***"
		exit 1
	fi
fi

# set permissions
chown -R abc:abc \
	/config

# set lockfile to avoid DB waits for this specific container
touch /dbwait.lock
